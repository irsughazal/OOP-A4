Question 1 and question 2 code

Question#01(b) 
#include <iostream>
#include <string>

class Student {
protected:
    std::string m_name; 
public:
    Student(std::string name) : m_name(name) {}

    std::string getName() const {
        return m_name;
    }

    virtual std::string getDegree() const = 0;

    virtual ~Student() {}
};

class Undergraduate : public Student {
private:
    std::string m_major; 
public:
    Undergraduate(std::string name, std::string major) : Student(name), m_major(major) {}
    std::string getMajor() const {
        return m_major;
    }

    std::string getDegree() const override {
        return "Bachelor of " + m_major;
    }
};

class Graduate : public Student {
private:
    std::string m_field; 
public:
    Graduate(std::string name, std::string field) : Student(name), m_field(field) {}

    std::string getField() const {
        return m_field;
    }

    std::string getDegree() const override {
        return "Master of " + m_field;
    }
};

void printStudent(const Student &student) {
    std::cout << "Name: " << student.getName() << "\n";
    std::cout << "Degree: " << student.getDegree() << "\n";
}

int main() {
    Undergraduate u1("Irsa", "Computer Science");

    Graduate g1("Sana", "Mathematics");
    printStudent(u1);
    printStudent(g1);

    return 0;
}


----------------------------------------------------------------------------------------
Question#02:

 #include <iostream> 
#include <string> 
#include <vector> 
 
Class  Product { private: 
    int productId;     std::string productName;     double price; 
 
public: 
    Product(int id, const std::string& name, double p) : productId(id), productName(name), price(p) {} 
 
    void showProductDetails() const {         std::cout << "Product ID: " << productId << ", Name: " << productName << ", Price: $" << price << std::endl; 
    } 
 
    double getPrice() const { 
        return price; 
    } 
}; 
 
 class ShoppingCart { private:     std::vector<Product*> products;  double totalCost; 
 
public:     void addProduct(Product* product) {         products.push_back(product); 
        totalCost += product->getPrice(); 
    } 
 
    void showAllProducts() const { 
        std::cout << "Products in the cart:" << std::endl;         for (const auto& product : products) { 
            product->showProductDetails(); 
        } 
    } 
 
    double calculateTotalCost() const { 
        return totalCost; 
    } 
}; 
 
 { private: 
    int userId; 
    ShoppingCart* shoppingCart; 
 
public: 
    User(int id) : userId(id), shoppingCart(nullptr) {} 
 
    void linkShoppingCart(ShoppingCart* cart) { 
        shoppingCart = cart; 
    } 
 
    void showUserDetails() const { 
        std::cout << "User ID: " << userId << std::endl; 
    } 
 
    ShoppingCart* getShoppingCart() const { 
        return shoppingCart; 
    } 
}; 
 
int main() { 
    
    Product* product1 = new Product(1, "Laptop", 999.99); 
    Product* product2 = new Product(2, "Phone", 599.50); 
    Product* product3 = new Product(3, "Headphones", 99.99); 
 
        Shopping Cart cart; cart.addProduct(product1);     cart.addProduct(product2);     cart.addProduct(product3); 
 
    
    User user(101); 
    user.linkShoppingCart(&cart); 
 
       user.showUserDetails(); 
    ShoppingCart* userCart = user.getShoppingCart();     if (userCart) { 
        userCart->showAllProducts(); 
        std::cout << "Total cost: $" << userCart->calculateTotalCost() << std::endl; 
    } 
 
    
    delete product1;     delete product2;     delete product3; 
 
    return 0; 
}
