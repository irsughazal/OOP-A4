Question#01(b) 
 #include <iostream> 
#include <string> 
 
 class Staff { protected:     std::string name;     int staffID; 
    std::string department; 
 
public: 
    Staff(const std::string& n, int id, const std::string& dept) : name(n), staffID(id), department(dept) {} 
 
       virtual void displayInfo() const = 0; 
 
    virtual ~Staff() {} 
}; 
  class Teacher : public Staff { private: 
    std::string subject; 
 
public: 
    Teacher(const std::string& n, int id, const std::string& dept, const std::string& sub)         : Staff(n, id, dept), subject(sub) {} 
 
     void displayInfo() const override { 
        std::cout << "Teacher: " << name << ", ID: " << staffID << ", Department: " << 
department 
                  << ", Subject: " << subject << std::endl;     } 
}; 
  
 class AdministrativeStaff : public Staff { private: 
    std::string role; 
 
public: 
    AdministrativeStaff(const std::string& n, int id, const std::string& dept, const std::string& r) 
        : Staff(n, id, dept), role(r) {} 
 
     void displayInfo() const override { 
        std::cout << "Administrative Staff: " << name << ", ID: " << staffID << ", 
Department: " << department 
                  << ", Role: " << role << std::endl; 
    } 
}; 
 
int main() { 
    
    Staff* staff1 = new Teacher("John Doe", 101, "Science Department", "Biology"); 
    Staff* staff2 = new AdministrativeStaff("Alice Smith", 201, "Administration", "Secretary"); 
 
      staff1->displayInfo();     staff2->displayInfo(); 
 
    delete staff1;     delete staff2;     return 0; 
}
 
Question#02:

 #include <iostream> 
#include <string> 
#include <vector> 
 
Class  Product { private: 
    int productId;     std::string productName;     double price; 
 
public: 
    Product(int id, const std::string& name, double p) : productId(id), productName(name), price(p) {} 
 
    void showProductDetails() const {         std::cout << "Product ID: " << productId << ", Name: " << productName << ", Price: $" << price << std::endl; 
    } 
 
    double getPrice() const { 
        return price; 
    } 
}; 
 
 class ShoppingCart { private:     std::vector<Product*> products;  double totalCost; 
 
public:     void addProduct(Product* product) {         products.push_back(product); 
        totalCost += product->getPrice(); 
    } 
 
    void showAllProducts() const { 
        std::cout << "Products in the cart:" << std::endl;         for (const auto& product : products) { 
            product->showProductDetails(); 
        } 
    } 
 
    double calculateTotalCost() const { 
        return totalCost; 
    } 
}; 
 
 { private: 
    int userId; 
    ShoppingCart* shoppingCart; 
 
public: 
    User(int id) : userId(id), shoppingCart(nullptr) {} 
 
    void linkShoppingCart(ShoppingCart* cart) { 
        shoppingCart = cart; 
    } 
 
    void showUserDetails() const { 
        std::cout << "User ID: " << userId << std::endl; 
    } 
 
    ShoppingCart* getShoppingCart() const { 
        return shoppingCart; 
    } 
}; 
 
int main() { 
    
    Product* product1 = new Product(1, "Laptop", 999.99); 
    Product* product2 = new Product(2, "Phone", 599.50); 
    Product* product3 = new Product(3, "Headphones", 99.99); 
 
        Shopping Cart cart; cart.addProduct(product1);     cart.addProduct(product2);     cart.addProduct(product3); 
 
    
    User user(101); 
    user.linkShoppingCart(&cart); 
 
       user.showUserDetails(); 
    ShoppingCart* userCart = user.getShoppingCart();     if (userCart) { 
        userCart->showAllProducts(); 
        std::cout << "Total cost: $" << userCart->calculateTotalCost() << std::endl; 
    } 
 
    
    delete product1;     delete product2;     delete product3; 
 
    return 0; 
}
